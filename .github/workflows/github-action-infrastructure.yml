name: DeployInfrastructureWithTerraform
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ main,  task67-github-action ]
  #   paths:
  #     - ./github-action/workflows/github-action-infrastructure.yml
   
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - devops-pipelines/github-action/github-action-infrastructure.yml
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment (dev, test, prod, ...)'
        required: true
        type: choice
        default: 'dev'
        options:
        - 'dev'
        - 'test'
        - 'prod'
      AZURE_REGION:
        description: 'Azure Region for the deployment'
        required: true
        type: choice        
        default: 'westeurope'
        options:
        - 'eastus2'
        - 'westeurope'
      AZURE_DEPLOYMENT_TYPE:
        description: 'Deployment type: cloud or edge'
        required: true
        type: choice        
        default: 'cloud'
        options:
        - 'cloud'
        - 'edge'
      AZURE_APP_PREFIX:
        description: 'Application prefix used for naming'
        required: true
        default: "5gpoc"

env:
  ENVIRONMENT: "${{ github.event.inputs.ENVIRONMENT }}"
  TERRAFORM_STORAGE_ACCOUNT: "stotf${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}${{ github.event.inputs.ENVIRONMENT }}"
  TERRAFORM_STORAGE_CONTAINER: "contf${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}${{ github.event.inputs.ENVIRONMENT }}"
  TERRAFORM_STORAGE_KEY: "contf${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}${{ github.event.inputs.ENVIRONMENT }}.tfstate"
  TERRAFORM_RESOURCE_GROUP: "rgtf${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}${{ github.event.inputs.ENVIRONMENT }}" 

jobs:
  deployterraformstorage:
    name: 'stage-deploy-terraform-storage'
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false        
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Prepare Configuration
        continue-on-error: false        
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "AZURE_REGION=${{ github.event.inputs.AZURE_REGION }}" 
          echo "AZURE_APP_PREFIX=${{ github.event.inputs.AZURE_APP_PREFIX }}"
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID" 
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" 
          echo "TERRAFORM_STORAGE_ACCOUNT=${{ env.TERRAFORM_STORAGE_ACCOUNT }}" 
          echo "TERRAFORM_STORAGE_CONTAINER=${{ env.TERRAFORM_STORAGE_CONTAINER }}" 
          echo "TERRAFORM_STORAGE_KEY=${{ env.TERRAFORM_STORAGE_KEY }}" 
          echo "TERRAFORM_RESOURCE_GROUP=${{ env.TERRAFORM_RESOURCE_GROUP }}" 
      
      - name: Create Terraform Storage 
        continue-on-error: false        
        run: |
          message="Create Terraform Storage Account if not exists"
          echo "$message"
          if [ $(az group exists --name ${{ env.TERRAFORM_RESOURCE_GROUP }}) = false ]; then
              echo "Create resource group  ${{ env.TERRAFORM_RESOURCE_GROUP }}"
              az group create -l ${{ github.event.inputs.AZURE_REGION }} -n ${{ env.TERRAFORM_RESOURCE_GROUP }}
          fi
          if [ $(az storage account check-name --name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --query nameAvailable) = true ]; then
            echo "Create Terraform Storage Account  ${{ env.TERRAFORM_STORAGE_ACCOUNT }}"
            az storage account create -n ${{ env.TERRAFORM_STORAGE_ACCOUNT }} -g ${{ env.TERRAFORM_RESOURCE_GROUP }} -l ${{ github.event.inputs.AZURE_REGION }} --sku Standard_GRS --kind StorageV2 --allow-blob-public-access false
            az storage container create -n ${{ env.TERRAFORM_STORAGE_CONTAINER }}  --account-name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --auth-mode login
            # az storage account update --name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --resource-group ${{ env.TERRAFORM_RESOURCE_GROUP }} --min-tls-version TLS1_2 # enforce TLS 1.2
            # az security atp storage update --resource-group ${{ env.TERRAFORM_RESOURCE_GROUP }} --storage-account ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --is-enabled true # enable ATP
            az storage account update --default-action Deny --name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --resource-group ${{ env.TERRAFORM_RESOURCE_GROUP }}  
            echo "Wait 120 seconds before the next step"
            # Wait 120 seconds before the next step use the same storage
            sleep 120
            while [[ -z $(az storage account show --name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}"  2>/dev/null| jq -r .id) ]]; do
              echo "Wait for the storage creation..."  
              sleep 10
            done
          fi
  deployinfrastructure:
    name: 'stage-deploy-infrastructure-with-terraform'
    needs: deployterraformstorage
    runs-on: ubuntu-22.04
    env:
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false        
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Prepare Configuration
        continue-on-error: false        
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "AZURE_REGION=${{ github.event.inputs.AZURE_REGION }}"  
          echo "AZURE_APP_PREFIX=${{ github.event.inputs.AZURE_APP_PREFIX }}"  
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"  
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"  
          echo "TERRAFORM_STORAGE_ACCOUNT=${{ env.TERRAFORM_STORAGE_ACCOUNT }}"  
          echo "TERRAFORM_STORAGE_CONTAINER=${{ env.TERRAFORM_STORAGE_CONTAINER }}"  
          echo "TERRAFORM_STORAGE_KEY=${{ env.TERRAFORM_STORAGE_KEY }}"  
          echo "TERRAFORM_RESOURCE_GROUP=${{ env.TERRAFORM_RESOURCE_GROUP }}"  
          echo "ARM_CLIENT_ID=${{ env.ARM_CLIENT_ID }}"  
          echo "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"  
          echo "ARM_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}"  
          echo "ARM_TENANT_ID=${{ env.ARM_TENANT_ID }}"  

      - name: Open Terraform Storage firewall
        continue-on-error: false        
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "TERRAFORM_STORAGE_ACCOUNT=${{ env.TERRAFORM_STORAGE_ACCOUNT }}"  
          echo "TERRAFORM_STORAGE_CONTAINER=${{ env.TERRAFORM_STORAGE_CONTAINER }}"  
          echo "TERRAFORM_STORAGE_KEY=${{ env.TERRAFORM_STORAGE_KEY }}"  
          echo "TERRAFORM_RESOURCE_GROUP=${{ env.TERRAFORM_RESOURCE_GROUP }}"  
          if [[ -n ${{ env.TERRAFORM_STORAGE_ACCOUNT }} ]]; then
            echo "Check if '${{ env.TERRAFORM_STORAGE_ACCOUNT }}' Azure Storage exists"  
            if [[ -n $(az storage account show --name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}"  2>/dev/null| jq -r .id) ]]; then
              STORAGE_ACCOUNT_KEY=$(az storage account keys list  --account-name ${{ env.TERRAFORM_STORAGE_ACCOUNT }} --query "[0].value" --output tsv) 
              AGENT_IP_ADDRESS=$(curl ifconfig.me)
              echo "Open '${{ env.TERRAFORM_STORAGE_ACCOUNT }}' Azure Storage firewall Ip Address: ${AGENT_IP_ADDRESS}" 
              az storage account network-rule add --ip-address ${AGENT_IP_ADDRESS} --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}" --account-name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}"   >/dev/null
              # az storage account update --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}" --name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}" --default-action Allow --output none
              while [[ -z $(az storage container list --account-key  "$STORAGE_ACCOUNT_KEY" --account-name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}"  2>/dev/null| jq -r '. | length ' ) ]]; do                       
                echo 'Firewall is still blocking the access, waiting...'  
                sleep 10
              done
              sleep 30
            else
              echo "Azure Storage '${{ env.TERRAFORM_STORAGE_ACCOUNT }}' doesn't exist"  
            fi
          fi 

      - name: 'Terraform Format'
        continue-on-error: false        
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.6
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: "./infrastructure/main"
      - name: 'Terraform Init'
        continue-on-error: false        
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.6
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: "./infrastructure/main"
          args: '  -backend-config="resource_group_name=${{ env.TERRAFORM_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ env.TERRAFORM_STORAGE_ACCOUNT }}"  -backend-config="container_name=${{ env.TERRAFORM_STORAGE_CONTAINER }}" -backend-config="key=${{ env.TERRAFORM_STORAGE_KEY }}"'
  
      - name: 'Terraform Validate'
        continue-on-error: false        
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.6
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: "./infrastructure/main"
          
      - name: 'Terraform Plan'
        continue-on-error: false        
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.6
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: "./infrastructure/main"
          args: ' -var="deployment_type=${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}" -var="prefix=${{ github.event.inputs.AZURE_APP_PREFIX }}" -var="location=${{ github.event.inputs.AZURE_REGION }}" -var="environment=${{ github.event.inputs.ENVIRONMENT }}" '

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || "${{ github.event.inputs.ENVIRONMENT }}" == "test"
        continue-on-error: false        
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.6
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: "./infrastructure/main"
          args: ' -var="deployment_type=${{ github.event.inputs.AZURE_DEPLOYMENT_TYPE }}" -var="prefix=${{ github.event.inputs.AZURE_APP_PREFIX }}" -var="location=${{ github.event.inputs.AZURE_REGION }}" -var="environment=${{ github.event.inputs.ENVIRONMENT }}" '
          
      - name: Close Terraform Storage firewall
        if: always()       
        continue-on-error: false 
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          echo "TERRAFORM_STORAGE_ACCOUNT=${{ env.TERRAFORM_STORAGE_ACCOUNT }}"  
          echo "TERRAFORM_STORAGE_CONTAINER=${{ env.TERRAFORM_STORAGE_CONTAINER }}"  
          echo "TERRAFORM_STORAGE_KEY=${{ env.TERRAFORM_STORAGE_KEY }}"  
          echo "TERRAFORM_RESOURCE_GROUP=${{ env.TERRAFORM_RESOURCE_GROUP }}"  
          if [[ -n ${{ env.TERRAFORM_STORAGE_ACCOUNT }} ]]; then
            echo "Check if '${{ env.TERRAFORM_STORAGE_ACCOUNT }}' Azure Storage exists"  
            if [[ -n $(az storage account show --name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}" --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}" 2>/dev/null| jq -r .id) ]]; then
              AGENT_IP_ADDRESS=$(curl ifconfig.me)
              echo "Close '${{ env.TERRAFORM_STORAGE_ACCOUNT }}' Azure Storage firewall Ip Address: ${AGENT_IP_ADDRESS}"  
              az storage account network-rule remove --ip-address ${AGENT_IP_ADDRESS} --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}" --account-name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}"   >/dev/null
              #az storage account update --resource-group "${{ env.TERRAFORM_RESOURCE_GROUP }}" --name "${{ env.TERRAFORM_STORAGE_ACCOUNT }}" --default-action Deny  --output none
              sleep 30
            fi
          fi